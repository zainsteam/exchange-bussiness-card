{"version":3,"sources":["webpack:///src/app/register/register.page.html","webpack:///src/app/register/register-routing.module.ts","webpack:///src/app/register/register.module.ts","webpack:///src/app/register/register.page.scss","webpack:///src/app/register/register.page.ts"],"names":["routes","path","component","RegisterPageRoutingModule","imports","forChild","exports","RegisterPageModule","declarations","RegisterPage","formBuilder","navCtrl","toast","apiService","errorMessage","successMessage","validation_messages","type","message","registerForm","group","firstName","lastName","email","compose","pattern","required","password","minLength","navigateForward","console","log","user","value","fName","lName","role","registerUser","subscribe","data","success","show","err","statusText","selector","template"],"mappings":"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","file":"register-register-module-es5.js","sourcesContent":["export default \"<ion-header>\\r\\n  <ion-toolbar color=\\\"primary\\\"> \\r\\n    <!-- <ion-buttons slot=\\\"start\\\">\\r\\n      <ion-menu-button></ion-menu-button>\\r\\n    </ion-buttons> -->\\r\\n    <ion-title>Register</ion-title>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n\\r\\n<ion-content>\\r\\n  <form class=\\\"ion-margin-horizontal\\\" [formGroup]=\\\"registerForm\\\" (ngSubmit)=\\\"registerUser()\\\">\\r\\n      \\r\\n    <ion-list style=\\\"margin-top: 15%;\\\">\\r\\n        <!-- <ion-label position=\\\"stacked\\\" color=\\\"dark\\\" class=\\\"lableFont\\\">First Name</ion-label> -->\\r\\n        <ion-input placeholder=\\\"First Name\\\" style=\\\"border:1px solid #888888;border-radius: 22px;margin-top: 10px;\\\" type=\\\"text\\\" formControlName=\\\"firstName\\\"></ion-input>\\r\\n            \\r\\n        <!-- <ion-label position=\\\"stacked\\\" color=\\\"dark\\\" class=\\\"lableFont\\\">Last Name</ion-label> -->\\r\\n        <ion-input placeholder=\\\"Last Name\\\" style=\\\"border:1px solid #888888;border-radius: 22px;margin-top: 10px;\\\" type=\\\"text\\\" formControlName=\\\"lastName\\\"></ion-input>\\r\\n\\r\\n        <!-- <ion-label position=\\\"stacked\\\" color=\\\"dark\\\" class=\\\"lableFont\\\">E-Mail*</ion-label> -->\\r\\n        <ion-input placeholder=\\\"Email\\\" style=\\\"border:1px solid #888888;border-radius: 22px;margin-top: 10px;\\\" type=\\\"email\\\" formControlName=\\\"email\\\"></ion-input>\\r\\n      <div class=\\\"validation-errors\\\">\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.email\\\">\\r\\n          <div *ngIf=\\\"registerForm.get('email').hasError(validation.type) && (registerForm.get('email').dirty || registerForm.get('email').touched)\\\">\\r\\n            {{ validation.message }}\\r\\n          </div>\\r\\n        </ng-container>\\r\\n      </div>\\r\\n\\r\\n        <!-- <ion-label position=\\\"stacked\\\" color=\\\"dark\\\" class=\\\"lableFont\\\">Password*</ion-label> -->\\r\\n        <ion-input placeholder=\\\"Password\\\" style=\\\"border:1px solid #888888;border-radius: 22px;margin-top: 10px;\\\" type=\\\"password\\\" formControlName=\\\"password\\\"></ion-input>\\r\\n      <div class=\\\"validation-errors\\\">\\r\\n        <ng-container *ngFor=\\\"let validation of validation_messages.password\\\">\\r\\n          <div *ngIf=\\\"registerForm.get('password').hasError(validation.type) && (registerForm.get('password').dirty || registerForm.get('password').touched)\\\">\\r\\n            {{ validation.message }}\\r\\n          </div>\\r\\n        </ng-container>\\r\\n      </div>\\r\\n\\r\\n    </ion-list>\\r\\n      \\r\\n    <ion-row style=\\\"justify-content: center;margin-top:3%;\\\">\\r\\n      <ion-button class=\\\"login-btn\\\" type=\\\"submit\\\" shape=\\\"round\\\" [disabled]=\\\"!registerForm.valid\\\">\\r\\n        REGISTER\\r\\n      </ion-button>\\r\\n    </ion-row>\\r\\n\\r\\n    <label class=\\\"error-message\\\">{{errorMessage}}</label>\\r\\n    <label class=\\\"success-message\\\">{{successMessage}}</label>\\r\\n\\r\\n  </form>\\r\\n  <p  style=\\\"text-align: center;\\\" (click)=\\\"gotologin()\\\">Already Regerter,<a> Login Here</a></p>\\r\\n\\r\\n</ion-content>\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { RegisterPage } from './register.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: RegisterPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class RegisterPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { RegisterPageRoutingModule } from './register-routing.module';\r\n\r\nimport { RegisterPage } from './register.page';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    RegisterPageRoutingModule\r\n  ],\r\n  declarations: [RegisterPage]\r\n})\r\nexport class RegisterPageModule {}\r\n","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3JlZ2lzdGVyL3JlZ2lzdGVyLnBhZ2Uuc2NzcyJ9 */\";","import { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormBuilder, FormGroup } from '@angular/forms';\r\nimport { NavController } from '@ionic/angular';\r\nimport { ApiService } from '../service/api/api.service';\r\nimport { Toast } from '@ionic-native/toast/ngx';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.page.html',\r\n  styleUrls: ['./register.page.scss'],\r\n})\r\nexport class RegisterPage implements OnInit {\r\n\r\n  public registerForm: FormGroup;\r\n  errorMessage: string = '';\r\n  successMessage: string = '';\r\n  loading;\r\n\r\n  validation_messages = {\r\n    'email': [\r\n      { type: 'required', message: 'Email is required.' },\r\n      { type: 'pattern', message: 'Enter a valid email.' }\r\n    ],\r\n    'password': [\r\n      { type: 'required', message: 'Password is required.' },\r\n      { type: 'minlength', message: 'Password must be at least 5 characters long.' }\r\n    ]\r\n  };\r\n\r\n  constructor(public formBuilder: FormBuilder,\r\n    private navCtrl: NavController,\r\n    private toast: Toast,\r\n    public apiService: ApiService) {\r\n      this.registerForm = formBuilder.group({\r\n        firstName: [''],\r\n        lastName: [''],\r\n        email: ['', Validators.compose([Validators.pattern('[a-zA-Z0-9.-_]{1,}@[a-zA-Z.-]{2,}[.]{1}[a-zA-Z]{2,}'), Validators.required])],\r\n        password: ['', Validators.compose([ Validators.minLength(5), Validators.required])]\r\n      });\r\n\r\n   }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  gotologin(){\r\n    this.navCtrl.navigateForward(['/login']);      \r\n  }\r\n\r\n  registerUser(){\r\n    console.log(\"registerUser Method\");\r\n    const user = {\r\n      email: this.registerForm.value.email,\r\n      password: this.registerForm.value.password,\r\n      fName: this.registerForm.value.firstName,\r\n      lName: this.registerForm.value.lastName,\r\n      role: \"user\"\r\n    }\r\n\r\n    console.log(\"user \", user);\r\n\r\n    this.apiService.registerUser(user)\r\n    .subscribe((data:any) => //Start Service\r\n    {\r\n      console.log(data);\r\n      if (data.success) {\r\n        console.log(data.user);\r\n        this.toast.show(`Successfully Register`, '5000', 'bottom').subscribe(\r\n          toast => {\r\n            console.log(toast);\r\n          }\r\n        );\r\n        this.navCtrl.navigateForward(['/']);\r\n      }\r\n      else {\r\n        console.log('Error  ',data.message);\r\n        this.toast.show(data.message, '5000', 'bottom').subscribe(\r\n          toast => {\r\n            console.log(toast);\r\n          }\r\n        );\r\n      }\r\n    },\r\n    err => {\r\n      console.log(err);\r\n      console.log(err.statusText);\r\n    });\r\n  }\r\n\r\n}"]}